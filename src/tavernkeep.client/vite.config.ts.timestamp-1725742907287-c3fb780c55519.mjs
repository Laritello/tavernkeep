// vite.config.ts
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///D:/GitHub/tavernkeep-v2/src/tavernkeep.client/node_modules/vite/dist/node/index.js";
import vue from "file:///D:/GitHub/tavernkeep-v2/src/tavernkeep.client/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import svgLoader from "file:///D:/GitHub/tavernkeep-v2/src/tavernkeep.client/node_modules/vite-svg-loader/index.js";
import fs from "fs";
import path from "path";
import child_process from "child_process";
var __vite_injected_original_import_meta_url = "file:///D:/GitHub/tavernkeep-v2/src/tavernkeep.client/vite.config.ts";
var baseFolder = process.env.APPDATA !== void 0 && process.env.APPDATA !== "" ? `${process.env.APPDATA}/ASP.NET/https` : `${process.env.HOME}/.aspnet/https`;
var certificateName = "tavernkeep.client";
var certFilePath = path.join(baseFolder, `${certificateName}.pem`);
var keyFilePath = path.join(baseFolder, `${certificateName}.key`);
if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
  if (0 !== child_process.spawnSync(
    "dotnet",
    ["dev-certs", "https", "--export-path", certFilePath, "--format", "Pem", "--no-password"],
    { stdio: "inherit" }
  ).status) {
    throw new Error("Could not create certificate.");
  }
}
var vite_config_default = defineConfig({
  plugins: [
    vue({
      script: {
        babelParserPlugins: ["decorators"]
      }
    }),
    svgLoader()
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    host: "0.0.0.0",
    port: 5173,
    https: {
      key: fs.readFileSync(keyFilePath),
      cert: fs.readFileSync(certFilePath)
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJEOlxcXFxHaXRIdWJcXFxcdGF2ZXJua2VlcC12MlxcXFxzcmNcXFxcdGF2ZXJua2VlcC5jbGllbnRcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkQ6XFxcXEdpdEh1YlxcXFx0YXZlcm5rZWVwLXYyXFxcXHNyY1xcXFx0YXZlcm5rZWVwLmNsaWVudFxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vRDovR2l0SHViL3RhdmVybmtlZXAtdjIvc3JjL3RhdmVybmtlZXAuY2xpZW50L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZmlsZVVSTFRvUGF0aCwgVVJMIH0gZnJvbSAnbm9kZTp1cmwnO1xyXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tICd2aXRlJztcclxuaW1wb3J0IHZ1ZSBmcm9tICdAdml0ZWpzL3BsdWdpbi12dWUnO1xyXG5pbXBvcnQgc3ZnTG9hZGVyIGZyb20gJ3ZpdGUtc3ZnLWxvYWRlcic7XHJcbmltcG9ydCBmcyBmcm9tICdmcyc7XHJcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xyXG5pbXBvcnQgY2hpbGRfcHJvY2VzcyBmcm9tICdjaGlsZF9wcm9jZXNzJztcclxuXHJcbmNvbnN0IGJhc2VGb2xkZXIgPVxyXG4gICAgcHJvY2Vzcy5lbnYuQVBQREFUQSAhPT0gdW5kZWZpbmVkICYmIHByb2Nlc3MuZW52LkFQUERBVEEgIT09ICcnXHJcbiAgICAgICAgPyBgJHtwcm9jZXNzLmVudi5BUFBEQVRBfS9BU1AuTkVUL2h0dHBzYFxyXG4gICAgICAgIDogYCR7cHJvY2Vzcy5lbnYuSE9NRX0vLmFzcG5ldC9odHRwc2A7XHJcblxyXG4vLyBjb25zdCBjZXJ0aWZpY2F0ZUFyZyA9IHByb2Nlc3MuYXJndlxyXG4vLyAgICAgLm1hcCgoYXJnKSA9PiBhcmcubWF0Y2goLy0tbmFtZT0oPzx2YWx1ZT4uKykvaSkpXHJcbi8vICAgICAuZmlsdGVyKEJvb2xlYW4pWzBdO1xyXG4vLyBjb25zdCBjZXJ0aWZpY2F0ZU5hbWUgPSBjZXJ0aWZpY2F0ZUFyZ1xyXG4vLyAgICAgPyBjZXJ0aWZpY2F0ZUFyZy5ncm91cHMudmFsdWVcclxuLy8gICAgIDogJ3RhdmVybmtlZXAuY2xpZW50JztcclxuXHJcbi8vIGlmICghY2VydGlmaWNhdGVOYW1lKSB7XHJcbi8vICAgICBjb25zb2xlLmVycm9yKFxyXG4vLyAgICAgICAgICdJbnZhbGlkIGNlcnRpZmljYXRlIG5hbWUuIFJ1biB0aGlzIHNjcmlwdCBpbiB0aGUgY29udGV4dCBvZiBhbiBucG0veWFybiBzY3JpcHQgb3IgcGFzcyAtLW5hbWU9PDxhcHA+PiBleHBsaWNpdGx5LidcclxuLy8gICAgICk7XHJcbi8vICAgICBwcm9jZXNzLmV4aXQoLTEpO1xyXG4vLyB9XHJcblxyXG5jb25zdCBjZXJ0aWZpY2F0ZU5hbWUgPSAndGF2ZXJua2VlcC5jbGllbnQnO1xyXG5jb25zdCBjZXJ0RmlsZVBhdGggPSBwYXRoLmpvaW4oYmFzZUZvbGRlciwgYCR7Y2VydGlmaWNhdGVOYW1lfS5wZW1gKTtcclxuY29uc3Qga2V5RmlsZVBhdGggPSBwYXRoLmpvaW4oYmFzZUZvbGRlciwgYCR7Y2VydGlmaWNhdGVOYW1lfS5rZXlgKTtcclxuXHJcbmlmICghZnMuZXhpc3RzU3luYyhjZXJ0RmlsZVBhdGgpIHx8ICFmcy5leGlzdHNTeW5jKGtleUZpbGVQYXRoKSkge1xyXG4gICAgaWYgKFxyXG4gICAgICAgIDAgIT09XHJcbiAgICAgICAgY2hpbGRfcHJvY2Vzcy5zcGF3blN5bmMoXHJcbiAgICAgICAgICAgICdkb3RuZXQnLFxyXG4gICAgICAgICAgICBbJ2Rldi1jZXJ0cycsICdodHRwcycsICctLWV4cG9ydC1wYXRoJywgY2VydEZpbGVQYXRoLCAnLS1mb3JtYXQnLCAnUGVtJywgJy0tbm8tcGFzc3dvcmQnXSxcclxuICAgICAgICAgICAgeyBzdGRpbzogJ2luaGVyaXQnIH1cclxuICAgICAgICApLnN0YXR1c1xyXG4gICAgKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgY3JlYXRlIGNlcnRpZmljYXRlLicpO1xyXG4gICAgfVxyXG59XHJcbi8vIGh0dHBzOi8vdml0ZWpzLmRldi9jb25maWcvXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgICBwbHVnaW5zOiBbXHJcbiAgICAgICAgdnVlKHtcclxuICAgICAgICAgICAgc2NyaXB0OiB7XHJcbiAgICAgICAgICAgICAgICBiYWJlbFBhcnNlclBsdWdpbnM6IFsnZGVjb3JhdG9ycyddLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pLFxyXG4gICAgICAgIHN2Z0xvYWRlcigpLFxyXG4gICAgXSxcclxuICAgIHJlc29sdmU6IHtcclxuICAgICAgICBhbGlhczoge1xyXG4gICAgICAgICAgICAnQCc6IGZpbGVVUkxUb1BhdGgobmV3IFVSTCgnLi9zcmMnLCBpbXBvcnQubWV0YS51cmwpKSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIHNlcnZlcjoge1xyXG4gICAgICAgIGhvc3Q6ICcwLjAuMC4wJyxcclxuICAgICAgICBwb3J0OiA1MTczLFxyXG4gICAgICAgIGh0dHBzOiB7XHJcbiAgICAgICAgICAgIGtleTogZnMucmVhZEZpbGVTeW5jKGtleUZpbGVQYXRoKSxcclxuICAgICAgICAgICAgY2VydDogZnMucmVhZEZpbGVTeW5jKGNlcnRGaWxlUGF0aCksXHJcbiAgICAgICAgfSxcclxuICAgIH0sXHJcbn0pO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQW1VLFNBQVMsZUFBZSxXQUFXO0FBQ3RXLFNBQVMsb0JBQW9CO0FBQzdCLE9BQU8sU0FBUztBQUNoQixPQUFPLGVBQWU7QUFDdEIsT0FBTyxRQUFRO0FBQ2YsT0FBTyxVQUFVO0FBQ2pCLE9BQU8sbUJBQW1CO0FBTmlMLElBQU0sMkNBQTJDO0FBUTVQLElBQU0sYUFDRixRQUFRLElBQUksWUFBWSxVQUFhLFFBQVEsSUFBSSxZQUFZLEtBQ3ZELEdBQUcsUUFBUSxJQUFJLE9BQU8sbUJBQ3RCLEdBQUcsUUFBUSxJQUFJLElBQUk7QUFnQjdCLElBQU0sa0JBQWtCO0FBQ3hCLElBQU0sZUFBZSxLQUFLLEtBQUssWUFBWSxHQUFHLGVBQWUsTUFBTTtBQUNuRSxJQUFNLGNBQWMsS0FBSyxLQUFLLFlBQVksR0FBRyxlQUFlLE1BQU07QUFFbEUsSUFBSSxDQUFDLEdBQUcsV0FBVyxZQUFZLEtBQUssQ0FBQyxHQUFHLFdBQVcsV0FBVyxHQUFHO0FBQzdELE1BQ0ksTUFDQSxjQUFjO0FBQUEsSUFDVjtBQUFBLElBQ0EsQ0FBQyxhQUFhLFNBQVMsaUJBQWlCLGNBQWMsWUFBWSxPQUFPLGVBQWU7QUFBQSxJQUN4RixFQUFFLE9BQU8sVUFBVTtBQUFBLEVBQ3ZCLEVBQUUsUUFDSjtBQUNFLFVBQU0sSUFBSSxNQUFNLCtCQUErQjtBQUFBLEVBQ25EO0FBQ0o7QUFFQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUN4QixTQUFTO0FBQUEsSUFDTCxJQUFJO0FBQUEsTUFDQSxRQUFRO0FBQUEsUUFDSixvQkFBb0IsQ0FBQyxZQUFZO0FBQUEsTUFDckM7QUFBQSxJQUNKLENBQUM7QUFBQSxJQUNELFVBQVU7QUFBQSxFQUNkO0FBQUEsRUFDQSxTQUFTO0FBQUEsSUFDTCxPQUFPO0FBQUEsTUFDSCxLQUFLLGNBQWMsSUFBSSxJQUFJLFNBQVMsd0NBQWUsQ0FBQztBQUFBLElBQ3hEO0FBQUEsRUFDSjtBQUFBLEVBQ0EsUUFBUTtBQUFBLElBQ0osTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sT0FBTztBQUFBLE1BQ0gsS0FBSyxHQUFHLGFBQWEsV0FBVztBQUFBLE1BQ2hDLE1BQU0sR0FBRyxhQUFhLFlBQVk7QUFBQSxJQUN0QztBQUFBLEVBQ0o7QUFDSixDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=
